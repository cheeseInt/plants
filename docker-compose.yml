

services:
  grafana:
    image: grafana/grafana:12.0.0 # Die neueste Version
    container_name: grafana-plants
    ports:
      - "3000:3000" # Mappt Port 3000 des Containers auf Port 3000 Ihres Hosts
    volumes:
      - plants_grafana_data:/var/lib/grafana # Mappt das Named Volume
    user: "472" # Stellt sicher, dass Grafana mit der korrekten UID läuft (Standard für grafana/grafana)
    restart: unless-stopped
    environment:
      # Hier können Sie Grafana-Konfigurationen über Umgebungsvariablen setzen
      # Zum Beispiel:
      # - GF_SECURITY_ADMIN_USER=admin
      # - GF_SECURITY_ADMIN_PASSWORD=IhrSicheresPasswort
      # - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      # - GF_SERVER_ROOT_URL=http://localhost:3000 # Wichtig, wenn Sie hinter einem Proxy laufen
      pass:

  postgres:
    image: postgres:16
    container_name: myplants-postgres
    restart: unless-stopped
    env_file:
      - .env
      - .secret
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  plants-core:
    build:
      context: ./plants-core
      dockerfile: Dockerfile
    depends_on:
      - postgres
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

volumes:
  pgdata:
  plants_grafana_data:
    name: plants_grafana_data # Definiert das Named Volume explizit
    # Wenn Sie das Volume komplett außerhalb von Docker Compose (mit `docker volume create ...`) erstellen und verwalten,
    # könnten Sie auch `external: true` verwenden. Die obige Definition ist jedoch flexibler,
    # da Compose das Volume erstellt, falls es nicht existiert, oder das existierende (und von Ihnen befüllte) verwendet.
#    external: true
